@page "/weather"
@using System.Text.Encodings.Web
@rendermode InteractiveServer
@attribute [OutputCache(Duration = 5)]
@inject PersistentComponentState PersistentState
@inject IApiServiceClient WeatherApi

<PageTitle>Weather</PageTitle>

<FluentLayout>
    <FluentHeader>Weather</FluentHeader>

    <FluentStack Orientation="Orientation.Vertical">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentLabel Typo="Typography.H5">This component demonstrates using the </FluentLabel>
            <FluentAnchor Href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.persistentcomponentstate?view=aspnetcore-9.0"
                Target="_blank">
                Persistent Component State
            </FluentAnchor>
            <FluentLabel Typo="Typography.H5"> class when pre-rendering.</FluentLabel>
        </FluentStack>

        <div style="display: table; table-layout: fixed; width: 100%;">
            <div style="overflow-x: auto;">
                <FluentDataGrid Items="@Forecasts?.AsQueryable()" Style="min-width: max-content;" TGridItem="WeatherForecast">
                    <ChildContent>
                        <PropertyColumn Title="Date" Property="@(c => c!.Date)" Sortable="true" Align="Align.Start" />
                        <PropertyColumn Title="Temp. (C)" Property="@(c => c!.TemperatureC)" Sortable="true" Align="Align.Center" />
                        <PropertyColumn Title="Temp. (F)" Property="@(c => c!.TemperatureF)" Sortable="true" Align="Align.Center" />
                        <PropertyColumn Title="Summary" Property="@(c => c!.Summary)" Sortable="true" Align="Align.End" />
                    </ChildContent>
                    <EmptyContent>
                        <FluentLabel Typo="Typography.H6">No data to display.</FluentLabel>
                    </EmptyContent>
                </FluentDataGrid>
            </div>
        </div>

        <FluentCard>
            <FluentLabel Typo="Typography.H5">Code Behind</FluentLabel>
            <br />
            <pre>
                @markupString
            </pre>
        </FluentCard>
    </FluentStack>
</FluentLayout>

<FluentOverlay Visible="@loading" Opacity="0.4">
    <FluentProgressRing />
</FluentOverlay>

@code {
    public List<WeatherForecast>? Forecasts { get; set; }
    private bool loading = true;
    private PersistingComponentStateSubscription? subscription;
    private MarkupString? markupString = CreateMarkup();

    protected override async Task OnInitializedAsync()
    {
        if (PersistentState.TryTakeFromJson<List<WeatherForecast>>("Forecasts", out var forecasts))
        {
            Forecasts = forecasts;
        }
        else
        {
            await Task.Delay(300); // Simulate loading delay
            Forecasts = await WeatherApi.Weather.GetWeatherAsync();
        }

        subscription = PersistentState.RegisterOnPersisting(() =>
        {
            PersistentState.PersistAsJson("Forecasts", Forecasts);
            return Task.CompletedTask;
        });

        loading = false;
    }

    private static MarkupString CreateMarkup()
    {
        var code = new System.Text.StringBuilder();
        code.AppendLine("@inject PersistentComponentState PersistentState");
        code.AppendLine("");
        code.AppendLine("...");
        code.AppendLine("");
        code.AppendLine("public List<WeatherForecast>? Forecasts { get; set; }");
        code.AppendLine("private PersistingComponentStateSubscription? subscription;");
        code.AppendLine("");
        code.AppendLine("protected override async Task OnInitializedAsync()");
        code.AppendLine("{");
        code.AppendLine("    if (PersistentState.TryTakeFromJson<List<WeatherForecast>>(\"Forecasts\", out var forecasts))");
        code.AppendLine("    {");
        code.AppendLine("        Forecasts = forecasts;");
        code.AppendLine("    }");
        code.AppendLine("    else");
        code.AppendLine("    {");
        code.AppendLine("        Forecasts = await WeatherApi.Weather.GetWeatherAsync();");
        code.AppendLine("    }");
        code.AppendLine("");
        code.AppendLine("    subscription = PersistentState.RegisterOnPersisting(() =>");
        code.AppendLine("    {");
        code.AppendLine("        PersistentState.PersistAsJson(\"Forecasts\", Forecasts);");
        code.AppendLine("        return Task.CompletedTask;");
        code.AppendLine("    });");
        code.AppendLine("}");

        var encodedCode = HtmlEncoder.Default.Encode(code.ToString());

        return new MarkupString($"<pre><code>{encodedCode}</code></pre>");
    }
}
